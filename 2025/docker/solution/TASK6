## Task 6: Persist Data with Docker Volumes

### 1. Create a Docker Volume

#### What is a Docker Volume?

A **Docker Volume** is a mechanism for persisting data generated by and used by Docker containers. Unlike bind mounts, volumes are managed by Docker and stored in a location outside the container's file system, ensuring data **persists** even if the container is removed or restarted.

#### How to Create a Volume

To create a new Docker volume, use the following command:

```sh
docker volume create my_volume
```

This command creates a volume named `my_volume`, which can now be used in containers.

#### Verify the Volume Creation

To check if the volume was created successfully, run:

```sh
docker volume ls
```

This will display a list of all available Docker volumes.

---

### 2. Run a Container with the Volume

#### Why Use Volumes in Containers?

Using volumes allows **data persistence**, meaning that application data is not lost when the container stops or is removed. This is particularly useful for databases and applications handling large datasets.

#### How to Mount a Volume in a Container

To run a container while mounting the volume:

```sh
docker run -d -v my_volume:/app/data <your-username>/sample-app:v1.0
```

This command:

- Runs the container in **detached mode (-d)**.
- Mounts the **my_volume** volume to the `/app/data` directory inside the container.
- Uses the image `<your-username>/sample-app:v1.0` to start the container.

#### Verify the Volume Mount

To inspect the volume usage in a running container:

```sh
docker inspect my_volume
```

This will show details about where the volume is stored on the host and which containers are using it.

---

### 3. Document the Process

#### Why Docker Volumes Are Useful

- **Persistent Data**: Ensures data is not lost when a container is restarted or removed.
- **Easier Data Management**: Volumes can be shared among multiple containers.
- **Better Performance**: Unlike bind mounts, volumes are optimized for Docker performance.
- **Improved Security**: Stored in a dedicated location rather than being dependent on the host systemâ€™s file structure.

#### Example Use Case

A **database container** (e.g., PostgreSQL, MySQL) requires persistent storage for user data. Without volumes, all data would be lost if the container were removed. By mounting a Docker volume, database data is retained and can be accessed across multiple container runs.

#### Clean Up Resources

To remove the container and volume when no longer needed:

```sh
docker stop <container_id>
docker rm <container_id>
docker volume rm my_volume
```

### 4. Summary Notes

- **Volumes** store persistent data independently of containers.
- **Creating and mounting volumes** ensures data is retained across container restarts.
- **Useful for databases, logs, and shared data** between multiple containers.
- **Easily managed** with `docker volume` commands.

This concludes Task 6, demonstrating how to use Docker volumes for **data persistence and storage management**. ðŸš€
